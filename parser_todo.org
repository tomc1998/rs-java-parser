* DONE Identifiers
** DONE Identifier:
    IDENTIFIER

** DONE QualifiedIdentifier:
    Identifier { . Identifier }

** DONE QualifiedIdentifierList: 
    QualifiedIdentifier { , QualifiedIdentifier }


* TODO Compilation unit
** TODO CompilationUnit: 
    [[Annotations] package QualifiedIdentifier ;]
                                {ImportDeclaration} {TypeDeclaration}

** TODO ImportDeclaration: 
    import [static] Identifier { . Identifier } [. *] ;

** TODO TypeDeclaration: 
    ClassOrInterfaceDeclaration
    ;

** TODO ClassOrInterfaceDeclaration: 
    {Modifier} (ClassDeclaration | InterfaceDeclaration)

** TODO ClassDeclaration: 
    NormalClassDeclaration
    EnumDeclaration

** TODO InterfaceDeclaration: 
    NormalInterfaceDeclaration
    AnnotationTypeDeclaration



** TODO NormalClassDeclaration: 
    class Identifier [TypeParameters]
                                [extends Type] [implements TypeList] ClassBody

** TODO EnumDeclaration:
    enum Identifier [implements TypeList] EnumBody

** TODO NormalInterfaceDeclaration: 
    interface Identifier [TypeParameters] [extends TypeList] InterfaceBody

** TODO AnnotationTypeDeclaration:
    @ interface Identifier AnnotationTypeBody


* DONE Types
** DONE Type:
    BasicType {[]}
    ReferenceType  {[]}

** DONE BasicType: 
    byte
    short
    char
    int
    long
    float
    double
    boolean

** DONE ReferenceType:
    Identifier [TypeArguments] { . Identifier [TypeArguments] }

** DONE TypeArguments: 
    < TypeArgument { , TypeArgument } >

** DONE TypeArgument:  
    ReferenceType
    ? [ (extends | super) ReferenceType ]

** DONE NonWildcardTypeArguments:
    < TypeList >

** DONE TypeList:  
    ReferenceType { , ReferenceType }


** DONE TypeArgumentsOrDiamond:
    < > 
    TypeArguments

** DONE NonWildcardTypeArgumentsOrDiamond:
    < >
    NonWildcardTypeArguments


** DONE TypeParameters:
    < TypeParameter { , TypeParameter } >

** DONE TypeParameter:
    Identifier [extends Bound]

** DONE Bound:  
    ReferenceType { & ReferenceType }


* DONE Modifiers / annotations
** DONE Modifier: 
    Annotation
    public
    protected
    private
    static 
    abstract
    final
    native
    synchronized
    transient
    volatile
    strictfp

** DONE Annotations:
    Annotation {Annotation}

** DONE Annotation:
    @ QualifiedIdentifier [ ( [AnnotationElement] ) ]

** DONE AnnotationElement:
    ElementValuePairs
    ElementValue

** DONE ElementValuePairs:
    ElementValuePair { , ElementValuePair }

** DONE ElementValuePair:
    Identifier = ElementValue
    
** DONE ElementValue:
    Annotation
    Expression1 
    ElementValueArrayInitializer

** DONE ElementValueArrayInitializer:
    { [ElementValues] [,] }

** DONE ElementValues:
    ElementValue { , ElementValue }

    
* TODO Classes
** TODO ClassBody: 
    { { ClassBodyDeclaration } }

** TODO ClassBodyDeclaration:
    ; 
    {Modifier} MemberDecl
    [static] Block

** TODO MemberDecl:
    MethodOrFieldDecl
    void Identifier VoidMethodDeclaratorRest
    Identifier ConstructorDeclaratorRest
    GenericMethodOrConstructorDecl
    ClassDeclaration
    InterfaceDeclaration

** TODO MethodOrFieldDecl:
    Type Identifier MethodOrFieldRest

** TODO MethodOrFieldRest:  
    FieldDeclaratorsRest ;
    MethodDeclaratorRest

** TODO FieldDeclaratorsRest:  
    VariableDeclaratorRest { , VariableDeclarator }

** TODO MethodDeclaratorRest:
    FormalParameters {[]} [throws QualifiedIdentifierList] (Block | ;)

** TODO VoidMethodDeclaratorRest:
    FormalParameters [throws QualifiedIdentifierList] (Block | ;)

** TODO ConstructorDeclaratorRest:
    FormalParameters [throws QualifiedIdentifierList] Block

** TODO GenericMethodOrConstructorDecl:
    TypeParameters GenericMethodOrConstructorRest

** TODO GenericMethodOrConstructorRest:
    (Type | void) Identifier MethodDeclaratorRest
    Identifier ConstructorDeclaratorRest

    
* TODO Interfaces
** TODO InterfaceBody: 
    { { InterfaceBodyDeclaration } }

** TODO InterfaceBodyDeclaration:
    ; 
    {Modifier} InterfaceMemberDecl

** TODO InterfaceMemberDecl:
    InterfaceMethodOrFieldDecl
    void Identifier VoidInterfaceMethodDeclaratorRest
    InterfaceGenericMethodDecl
    ClassDeclaration
    InterfaceDeclaration

** TODO InterfaceMethodOrFieldDecl:
    Type Identifier InterfaceMethodOrFieldRest

** TODO InterfaceMethodOrFieldRest:
    ConstantDeclaratorsRest ;
    InterfaceMethodDeclaratorRest

** TODO ConstantDeclaratorsRest: 
    ConstantDeclaratorRest { , ConstantDeclarator }

** TODO ConstantDeclaratorRest: 
    {[]} = VariableInitializer

** TODO ConstantDeclarator: 
    Identifier ConstantDeclaratorRest

** TODO InterfaceMethodDeclaratorRest:
    FormalParameters {[]} [throws QualifiedIdentifierList] ; 

** TODO VoidInterfaceMethodDeclaratorRest:
    FormalParameters [throws QualifiedIdentifierList] ;  

** TODO InterfaceGenericMethodDecl:
    TypeParameters (Type | void) Identifier InterfaceMethodDeclaratorRest


* TODO Formal Parameters
** TODO FormalParameters: 
    ( [FormalParameterDecls] )

** TODO FormalParameterDecls: 
    {VariableModifier}  Type FormalParameterDeclsRest

** TODO FormalParameterDeclsRest: 
    VariableDeclaratorId [, FormalParameterDecls]
    ... VariableDeclaratorId

** TODO VariableDeclaratorId:
    Identifier {[]}
    // Example: foo[][]

* DONE Variables
** DONE VariableModifier:
    final
    Annotation

** DONE VariableDeclarators:
    VariableDeclarator { , VariableDeclarator }

** DONE VariableDeclarator:
    Identifier VariableDeclaratorRest

** DONE VariableDeclaratorRest:
    {[]} [ = VariableInitializer ]

** DONE VariableInitializer:
    ArrayInitializer
    Expression

** DONE ArrayInitializer:
    { [ VariableInitializer { , VariableInitializer } [,] ] }


* DONE Blocks / statements
** DONE Block: 
    { BlockStatements }

** DONE BlockStatements: 
    { BlockStatement }

** DONE BlockStatement:
    LocalVariableDeclarationStatement
    ClassOrInterfaceDeclaration
    [Identifier :] Statement

** DONE LocalVariableDeclarationStatement:
    { VariableModifier }  Type VariableDeclarators ;

** DONE Statement:
    Block
    ;
    Identifier : Statement
    StatementExpression ;
    if ParExpression Statement [else Statement] 
    assert Expression [: Expression] ;
    switch ParExpression { SwitchBlockStatementGroups } 
    while ParExpression Statement
    do Statement while ParExpression ;
    for ( ForControl ) Statement
    break [Identifier] ;
    continue [Identifier] ;
    return [Expression] ;
    throw Expression ;
    synchronized ParExpression Block
    try Block (Catches | [Catches] Finally)
    try ResourceSpecification Block [Catches] [Finally]

** DONE StatementExpression: 
    Expression

    
* TODO Try / catch
** TODO Catches:
    CatchClause { CatchClause }

** TODO CatchClause:  
    catch ( {VariableModifier} CatchType Identifier ) Block

** TODO CatchType:
    QualifiedIdentifier { | QualifiedIdentifier }

** TODO Finally:
    finally Block

** TODO ResourceSpecification:
    ( Resources [;] )

** TODO Resources:
    Resource { ; Resource }

** TODO Resource:
    {VariableModifier} ReferenceType VariableDeclaratorId = Expression 


* TODO Switches
** TODO SwitchBlockStatementGroups: 
    { SwitchBlockStatementGroup }

** TODO SwitchBlockStatementGroup: 
    SwitchLabels BlockStatements

** TODO SwitchLabels:
    SwitchLabel { SwitchLabel }

** TODO SwitchLabel: 
    case Expression :
    case EnumConstantName :
    default :

** TODO EnumConstantName:
    Identifier



* TODO For loops
** TODO ForControl:
    ForVarControl
    ForInit ; [Expression] ; [ForUpdate]

** TODO ForVarControl:
    {VariableModifier} Type VariableDeclaratorId  ForVarControlRest

** TODO ForVarControlRest:
    ForVariableDeclaratorsRest ; [Expression] ; [ForUpdate]
    : Expression

** TODO ForVariableDeclaratorsRest:
    [= VariableInitializer] { , VariableDeclarator }

** TODO ForInit: 
** TODO ForUpdate:
    StatementExpression { , StatementExpression }    

    
* DONE Expressions / Operators
** DONE Fix expression3, allow paren exprs
   Grammar was pretty shit on this
** DONE Expression: 
    Expression1 [AssignmentOperator Expression1]

** DONE AssignmentOperator: 
    = 
    +=
    -= 
    *=
    /=
    &=
    |=
    ^=
    %=
    <<=
    >>=
    >>>=

** DONE Expression1: 
    Expression2 [Expression1Rest]

** DONE Expression1Rest: 
    ? Expression : Expression1

** DONE Expression2:
    Expression3 [Expression2Rest]

** DONE Expression2Rest:
    { InfixOp Expression3 }
    instanceof Type

** DONE InfixOp: 
    || 
    &&
    |
    ^
    &
    ==
    !=
    <
    >
    <=
    >=
    <<
    >>
    >>>
    +
    -
    *
    /
    %

** DONE Expression3: 
    PrefixOp Expression3
    ( (Expression | Type) ) Expression3
    Primary { Selector } { PostfixOp }

** DONE PrefixOp: 
    ++
    --
    !
    ~
    +
    -

** DONE PostfixOp: 
    ++
    --


* DONE 'Atoms'
** DONE Primary: 
    Literal
    ParExpression
    this [Arguments]
    super SuperSuffix
    new Creator
    NonWildcardTypeArguments (ExplicitGenericInvocationSuffix | this Arguments)
    Identifier { . Identifier } [IdentifierSuffix]
    BasicType {[]} . class
    void . class
    
** DONE Literal:
    IntegerLiteral
    FloatingPointLiteral
    CharacterLiteral 
    StringLiteral 
    BooleanLiteral
    NullLiteral

** DONE ParExpression: 
    ( Expression )

** DONE Arguments:
    ( [ Expression { , Expression } ] )

** DONE SuperSuffix: 
    Arguments 
    . Identifier [Arguments]

** DONE ExplicitGenericInvocationSuffix: 
    super SuperSuffix
    Identifier Arguments

    
* TODO . access, & new exprs
** DONE Creator:  
    NonWildcardTypeArguments CreatedName ClassCreatorRest
    CreatedName (ClassCreatorRest | ArrayCreatorRest)

** DONE CreatedName:   
    Identifier [TypeArgumentsOrDiamond] { . Identifier [TypeArgumentsOrDiamond] }

** DONE ClassCreatorRest: 
    Arguments [ClassBody]

** DONE ArrayCreatorRest:
    [ (] {[]} ArrayInitializer  |  Expression ] {[ Expression ]} {[]})


** TODO IdentifierSuffix:
    [ ({[]} . class | Expression) ]
    Arguments 
    . (class | ExplicitGenericInvocation | this | super Arguments |
                                new [NonWildcardTypeArguments] InnerCreator)
** TODO ExplicitGenericInvocation:
    NonWildcardTypeArguments ExplicitGenericInvocationSuffix

** TODO InnerCreator:  
    Identifier [NonWildcardTypeArgumentsOrDiamond] ClassCreatorRest


** TODO Selector:
    . Identifier [Arguments]
    . ExplicitGenericInvocation
    . this
    . super SuperSuffix
    . new [NonWildcardTypeArguments] InnerCreator
    [ Expression ]


* TODO Enums
** TODO EnumBody:
    { [EnumConstants] [,] [EnumBodyDeclarations] }

** TODO EnumConstants:
    EnumConstant
    EnumConstants , EnumConstant

** TODO EnumConstant:
    [Annotations] Identifier [Arguments] [ClassBody]

** TODO EnumBodyDeclarations:
    ; {ClassBodyDeclaration}


    
* TODO Annotation declarations
** TODO AnnotationTypeBody:
    { [AnnotationTypeElementDeclarations] }

** TODO AnnotationTypeElementDeclarations:
    AnnotationTypeElementDeclaration
    AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration

** TODO AnnotationTypeElementDeclaration:
    {Modifier} AnnotationTypeElementRest

** TODO AnnotationTypeElementRest:
    Type Identifier AnnotationMethodOrConstantRest ;
    ClassDeclaration
    InterfaceDeclaration
    EnumDeclaration  
    AnnotationTypeDeclaration

** TODO AnnotationMethodOrConstantRest:
    AnnotationMethodRest
    ConstantDeclaratorsRest  

** TODO AnnotationMethodRest:
    ( ) [[]] [default ElementValue]
